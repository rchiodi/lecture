0.  How much time did you spend on this pre-class exercise, and when?
	Sunday, September 20, 2015 for 1.5 hour

1.  What are one or two points that you found least clear in the
    9/24 slide decks (including the narration)?
The difference between the parallelization for lecture slides 9/22 and OMP in 9/24.

2.  The omp_mc.c file in the demo subdirectory runs a Monte Carlo
    simulation to estimate the expected value of a uniform random
    variable.  The "-p" option sets the number of processors used,
    while "-b" sets the number of trials between synchronizations.

    a) Write a model for the run time for this simulation code in
       terms of the number of trials (N), number of processors (p),
       time per trial (t_trial), and time to update the global
       counters in the critical section (t_update).
	RT = N*(t_trial/p+p*t_update)
	This is the same equation I had before, perhaps I do not understand the difference in parallelization methods.

    b) Run the code with a few different parameter values in order
       to estimate N, t_trial, and t_update for this code on
       a totient compute node.
	(prods,trials between, time)
	! Why does it always say 24 threads?
	1,10,1.116968E-01
	2,10,1.214554E-01
	3,10,1.203836E-01
	1,100,4.948528E-02
	2,100,4.045500E-02
	3,100,3.055468E-02

    c) Based on your model, suggest a strategy for choosing the batch
       size.  How might you generalize this strategy to automatically
       choose batch sizes for different types of computational
       experiments?
	The strategy would be to minimize RT by considering each processor added will reduce the time_trial but add communication times. This could be generalized by running a few small test cases to get a general time for communication per processor and time per task per processor. This could then be used to make an educated guess on the optimal number of processors.

3.  The "OpenMP pitfalls" paper describes some common pitfalls (both
    performance and correctness) in OpenMP codes.  Go through the
    checklist in the paper for omp_mc.c.  What performance mistakes
    are there in the demonstration implementation?
Will do after class.